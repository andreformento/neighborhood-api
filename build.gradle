buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

group = 'andreformento'

apply plugin: 'java'
//apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
    baseName = 'neighborhood-api'
    version = '3.0.0' //${project.version}
}

task copyJar(type: Copy) {
    from        "build/resources/main/properties.json"
    into        'build/docker'
    from        "build/resources/main/provinces.json"
    into        'build/docker'
}

task buildDocker(type: Docker, dependsOn: build) {
    dependsOn copyJar
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

//Configures the compile and runtime configurations for our integration tests
//and includes the dependencies of the test task.
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')

    compile('com.google.guava:guava:21.0')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('nl.jqno.equalsverifier:equalsverifier:2.3')
    testCompile("org.assertj:assertj-core:3.8.0")

    integrationTestCompile('net.javacrumbs.json-unit:json-unit-fluent:1.23.0')
    integrationTestCompile('io.rest-assured:rest-assured:3.0.3')
    integrationTestCompile('io.rest-assured:json-schema-validator:3.0.3')
    integrationTestCompile('io.rest-assured:spring-mock-mvc:3.0.3')
}


sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test, dependsOn: cleanTest) {
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn jacocoTestReport

integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task jacocoIntegrationTestReport(type: JacocoReport){
    sourceSets sourceSets.main
    executionData integrationTest
}
